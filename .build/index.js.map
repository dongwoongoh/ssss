{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["{\n  function iter<T>(arr: Iterable<T>): T[] {\n    return [...arr]\n  }\n\n  const result = iter([1, 2, 3, 4])\n  console.log(result)\n\n  function anyTest(anyArr: any): any {\n    return anyArr\n  }\n\n  const anyResult = anyTest([1, 2, 3, 4])\n  console.log(anyResult)\n  console.clear()\n}\n{\n  interface Props<T, K> {\n    name: T\n    age: K\n  }\n  function test({ name, age }: Props<string, number>): Props<string, number> {\n    return { name, age }\n  }\n  const result = test({ name: 'mad', age: 1 })\n  console.log(result)\n  console.clear()\n}\n{\n  interface Props<T, K> {\n    name: T,\n    age: K\n  }\n  function test<G = string, H = number>({ name, age }: Props<G, H>): Props<G, H> {\n    return { name, age }\n  }\n  const result = test({ name: 'okok', age: '1' })\n  console.log(result)\n  console.clear()\n}\n{\n  type Props<A, B> = {\n    name: A,\n    age: B\n  }\n  type InnerType<C = string, D = string> = Props<C, D>\n  function test({ name, age }: InnerType): InnerType {\n    return { name, age }\n  }\n  const output = test({ name: 'mad', age: '1' })\n  type Result = ReturnType<typeof test>\n  const result: Result = output\n  console.log(result)\n  console.clear()\n}\n{\n  type X<Type> = { readonly [Property in keyof Type]: Type[Property] }\n  type Y = { readonly name: string, readonly age: number }\n  const user: X<Y> = { name: 'mad', age: 1 }\n  console.log(user)\n  console.clear()\n}\n{\n  type Members = 'mad' | 'integral'\n  type Result = `account_id: ${Members}`\n  const mad: Result = 'account_id: mad'\n  const integral: Result = 'account_id: integral'\n  console.log(mad)\n  console.log(integral)\n  console.clear()\n}\n{\n  type SignUpType = {\n    readonly kind: 'sign_up'\n    password?: string\n    confirmPassword?: string\n  }\n\n  type SignInType = {\n    readonly kind: 'sign_in'\n    password?: string\n  }\n\n  type Middleware = SignInType | SignUpType\n\n  function middleware(sign: Middleware): SignUpType | SignInType | void {\n    switch (sign.kind) {\n      case 'sign_up':\n        delete sign.password\n        delete sign.confirmPassword\n        return sign\n      case 'sign_in':\n        delete sign.password\n        return sign\n      default:\n        break\n    }\n  }\n\n  const signUp = middleware({ kind: 'sign_up', password: '123', confirmPassword: '123' })\n  const signIn = middleware({ kind: 'sign_in', password: '123' })\n  console.log('sign_up: ', signUp)\n  console.log('sign_in: ', signIn)\n  console.clear()\n}\n{\n  class Person {\n    protected readonly name = 'mad'\n    protected test() {\n      return 'mad'\n    }\n  }\n  class Mad extends Person {\n    public output() {\n      return this.name + 'hello!'\n    }\n  }\n  const mad = new Mad()\n  const output = mad.output()\n  console.log(output)\n}"],
  "mappings": "AAAA;AACE,MAAS,OAAT,SAAiB,KAAuB;AACtC,WAAO,CAAC,GAAG;AAAA,KAMJ,UAAT,SAAiB,QAAkB;AACjC,WAAO;AAAA;AARA,oBAOA;AAHT,QAAM,SAAS,KAAK,CAAC,GAAG,GAAG,GAAG;AAC9B,UAAQ,IAAI;AAMZ,QAAM,YAAY,QAAQ,CAAC,GAAG,GAAG,GAAG;AACpC,UAAQ,IAAI;AACZ,UAAQ;AAAA;AAEV;AAKE,MAAS,OAAT,SAAc,EAAE,MAAM,OAAqD;AACzE,WAAO,EAAE,MAAM;AAAA;AADR;AAGT,QAAM,SAAS,KAAK,EAAE,MAAM,OAAO,KAAK;AACxC,UAAQ,IAAI;AACZ,UAAQ;AAAA;AAEV;AAKE,MAAS,OAAT,SAAsC,EAAE,MAAM,OAAiC;AAC7E,WAAO,EAAE,MAAM;AAAA;AADR;AAGT,QAAM,SAAS,KAAK,EAAE,MAAM,QAAQ,KAAK;AACzC,UAAQ,IAAI;AACZ,UAAQ;AAAA;AAEV;AAME,MAAS,OAAT,SAAc,EAAE,MAAM,OAA6B;AACjD,WAAO,EAAE,MAAM;AAAA;AADR;AAGT,QAAM,SAAS,KAAK,EAAE,MAAM,OAAO,KAAK;AAExC,QAAM,SAAiB;AACvB,UAAQ,IAAI;AACZ,UAAQ;AAAA;AAEV;AAGE,QAAM,OAAa,EAAE,MAAM,OAAO,KAAK;AACvC,UAAQ,IAAI;AACZ,UAAQ;AAAA;AAEV;AAGE,QAAM,MAAc;AACpB,QAAM,WAAmB;AACzB,UAAQ,IAAI;AACZ,UAAQ,IAAI;AACZ,UAAQ;AAAA;AAEV;AAcE,MAAS,aAAT,SAAoB,MAAkD;AACpE,YAAQ,KAAK;AAAA,WACN;AACH,eAAO,KAAK;AACZ,eAAO,KAAK;AACZ,eAAO;AAAA,WACJ;AACH,eAAO,KAAK;AACZ,eAAO;AAAA;AAEP;AAAA;AAAA;AAVG;AAcT,QAAM,SAAS,WAAW,EAAE,MAAM,WAAW,UAAU,OAAO,iBAAiB;AAC/E,QAAM,SAAS,WAAW,EAAE,MAAM,WAAW,UAAU;AACvD,UAAQ,IAAI,aAAa;AACzB,UAAQ,IAAI,aAAa;AACzB,UAAQ;AAAA;AAEV;AACE,eAAa;AAAA,IACQ,OAAO;AAAA,IAChB,OAAO;AACf,aAAO;AAAA;AAAA;AAGX,oBAAkB,OAAO;AAAA,IAChB,SAAS;AACd,aAAO,KAAK,OAAO;AAAA;AAAA;AAGvB,QAAM,MAAM,IAAI;AAChB,QAAM,SAAS,IAAI;AACnB,UAAQ,IAAI;AAAA;",
  "names": []
}
