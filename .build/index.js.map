{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["{\n  function iter<T>(arr: Iterable<T>): T[] {\n    return [...arr]\n  }\n\n  const result = iter([1, 2, 3, 4])\n  console.log(result)\n\n  function anyTest(anyArr: any): any {\n    return anyArr\n  }\n\n  const anyResult = anyTest([1, 2, 3, 4])\n  console.log(anyResult)\n  console.clear()\n}\n{\n  interface Props<T, K> {\n    name: T\n    age: K\n  }\n  function test({ name, age }: Props<string, number>): Props<string, number> {\n    return { name, age }\n  }\n  const result = test({ name: 'mad', age: 1 })\n  console.log(result)\n  console.clear()\n}\n{\n  interface Props<T, K> {\n    name: T,\n    age: K\n  }\n  function test<G = string, H = number>({ name, age }: Props<G, H>): Props<G, H> {\n    return { name, age }\n  }\n  const result = test({ name: 'okok', age: '1' })\n  console.log(result)\n  console.clear()\n}\n{\n  type Props<A, B> = {\n    name: A,\n    age: B\n  }\n  type InnerType<C = string, D = string> = Props<C, D>\n  function test({ name, age }: InnerType): InnerType {\n    return { name, age }\n  }\n  const output = test({ name: 'mad', age: '1' })\n  type Result = ReturnType<typeof test>\n  const result: Result = output\n  console.log(result)\n}"],
  "mappings": "AAAA;AACE,MAAS,OAAT,SAAiB,KAAuB;AACtC,WAAO,CAAC,GAAG;AAAA,KAMJ,UAAT,SAAiB,QAAkB;AACjC,WAAO;AAAA;AARA,oBAOA;AAHT,QAAM,SAAS,KAAK,CAAC,GAAG,GAAG,GAAG;AAC9B,UAAQ,IAAI;AAMZ,QAAM,YAAY,QAAQ,CAAC,GAAG,GAAG,GAAG;AACpC,UAAQ,IAAI;AACZ,UAAQ;AAAA;AAEV;AAKE,MAAS,OAAT,SAAc,EAAE,MAAM,OAAqD;AACzE,WAAO,EAAE,MAAM;AAAA;AADR;AAGT,QAAM,SAAS,KAAK,EAAE,MAAM,OAAO,KAAK;AACxC,UAAQ,IAAI;AACZ,UAAQ;AAAA;AAEV;AAKE,MAAS,OAAT,SAAsC,EAAE,MAAM,OAAiC;AAC7E,WAAO,EAAE,MAAM;AAAA;AADR;AAGT,QAAM,SAAS,KAAK,EAAE,MAAM,QAAQ,KAAK;AACzC,UAAQ,IAAI;AACZ,UAAQ;AAAA;AAEV;AAME,MAAS,OAAT,SAAc,EAAE,MAAM,OAA6B;AACjD,WAAO,EAAE,MAAM;AAAA;AADR;AAGT,QAAM,SAAS,KAAK,EAAE,MAAM,OAAO,KAAK;AAExC,QAAM,SAAiB;AACvB,UAAQ,IAAI;AAAA;",
  "names": []
}
