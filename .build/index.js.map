{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["{\n  function iter<T>(arr: Iterable<T>): T[] {\n    return [...arr]\n  }\n\n  const result = iter([1, 2, 3, 4])\n  console.log(result)\n\n  function anyTest(anyArr: any): any {\n    return anyArr\n  }\n\n  const anyResult = anyTest([1, 2, 3, 4])\n  console.log(anyResult)\n  console.clear()\n}\n{\n  interface Props<T, K> {\n    name: T\n    age: K\n  }\n  function test({ name, age }: Props<string, number>): Props<string, number> {\n    return { name, age }\n  }\n  const result = test({ name: 'mad', age: 1 })\n  console.log(result)\n  console.clear()\n}\n{\n  interface Props<T, K> {\n    name: T,\n    age: K\n  }\n  function test<G = string, H = number>({ name, age }: Props<G, H>): Props<G, H> {\n    return { name, age }\n  }\n  const result = test({ name: 'okok', age: '1' })\n  console.log(result)\n  console.clear()\n}\n{\n  type Props<A, B> = {\n    name: A,\n    age: B\n  }\n  type InnerType<C = string, D = string> = Props<C, D>\n  function test({ name, age }: InnerType): InnerType {\n    return { name, age }\n  }\n  const output = test({ name: 'mad', age: '1' })\n  type Result = ReturnType<typeof test>\n  const result: Result = output\n  console.log(result)\n  console.clear()\n}\n{\n  type X<Type> = { readonly [Property in keyof Type]: Type[Property] }\n  type Y = { readonly name: string, readonly age: number }\n  const user: X<Y> = { name: 'mad', age: 1 }\n  console.log(user)\n  console.clear()\n}\n{\n  type Members = 'mad' | 'integral'\n  type Result = `account_id: ${Members}`\n  const mad: Result = 'account_id: mad'\n  const integral: Result = 'account_id: integral'\n  console.log(mad)\n  console.log(integral)\n  console.clear()\n}\n{\n  type SignUpType = {\n    readonly kind: 'sign_up'\n    password?: string\n    confirmPassword?: string\n  }\n\n  type SignInType = {\n    readonly kind: 'sign_in'\n    password?: string\n  }\n\n  type Middleware = SignInType | SignUpType\n\n  function middleware(sign: Middleware): SignUpType | SignInType | void {\n    switch (sign.kind) {\n      case 'sign_up':\n        delete sign.password\n        delete sign.confirmPassword\n        return sign\n      case 'sign_in':\n        delete sign.password\n        return sign\n      default:\n        break\n    }\n  }\n\n  const signUp = middleware({ kind: 'sign_up', password: '123', confirmPassword: '123' })\n  const signIn = middleware({ kind: 'sign_in', password: '123' })\n  console.log('sign_up: ', signUp)\n  console.log('sign_in: ', signIn)\n  console.clear()\n}\n{\n  class Person {\n    protected readonly name = 'mad'\n    protected test() {\n      return 'mad'\n    }\n  }\n  class Mad extends Person {\n    public output() {\n      return this.name + 'hello!'\n    }\n  }\n  const mad = new Mad()\n  const output = mad.output()\n  console.log(output)\n  console.clear()\n}\n{\n  interface PersonInterface {\n    readonly accountId: string\n  }\n  interface NicknameInterface {\n    readonly nickname: string\n  }\n  interface MadInterface<T> {\n    readonly result: ({ nickname }: NicknameInterface) => T\n  }\n  class Person {\n    protected accountId({ accountId }: PersonInterface): PersonInterface {\n      return { accountId }\n    }\n  }\n  class Mad extends Person implements MadInterface<{ nickname: string, accountId: string }> {\n    public result({ nickname }: NicknameInterface) {\n      return { ...this.accountId({ accountId: 'mad' }), nickname }\n    }\n  }\n  const mad = new Mad()\n  const result = mad.result({ nickname: 'ninini' })\n  console.log(result)\n  console.clear()\n}\n{\n  function gogo<T, L>(arr: T[], func: (args: T) => L): L[] {\n    return arr.map(func)\n  }\n  const result = gogo([\"1\", \"2\", \"3\", \"4\"], (i) => parseInt(i))\n  console.log(result)\n  console.clear()\n}\n{\n  type Attribute = {\n    name: string\n    age: number\n  }\n  function updateUserData(insert: Required<Attribute>, update: Partial<Attribute>): Attribute {\n    return { ...insert, ...update }\n  }\n  const user: Required<Attribute> = {\n    name: 'mad',\n    age: 1\n  }\n  const updateProfile = updateUserData(user, { age: 3 })\n  console.log(updateProfile)\n  console.clear()\n}\n{\n  class Animal {\n    constructor(public name: string) { }\n  }\n  class Lion extends Animal {\n    constructor(public readonly name: string) {\n      super(name)\n    }\n    public greeting() {\n      return this.name\n    }\n  }\n  const lion = new Lion('lion')\n  console.log(lion.greeting())\n  console.clear()\n}\n{\n  class Thing {\n    _size = 0\n\n    get size(): number {\n      return this._size\n    }\n\n    set size(value: string | number | boolean) {\n      let num = Number(value)\n      if (!Number.isFinite(num)) {\n        this._size = 0\n        throw new Error('value has no type number')\n      }\n      this._size = num\n    }\n  }\n\n  const thing = new Thing()\n  thing.size = '10'\n  const getter = thing.size\n  console.log('getter: ', getter)\n  console.clear()\n}\n{\n  function transform<T, K>(arr: T[], func: (args: T) => K): K[] {\n    return arr.map(func)\n  }\n  const elements = [1, \"2\", \"3\", 4, \"5\"]\n  const result = transform(elements, (el) => {\n    if (typeof el === 'string') {\n      console.log(el)\n      Number(el)\n      console.log(typeof el)\n    }\n    return el\n  })\n  console.log(result)\n  console.clear()\n}\n{\n  class Person {\n    constructor(protected name: string) { }\n  }\n  class Mad extends Person {\n    constructor(name: string, private message: string) {\n      super(name)\n    }\n\n    set setName(name: string) {\n      this.name = name\n    }\n\n    set setMessage(message: string) {\n      this.message = message\n    }\n\n    get greeting(): string {\n      return `name: ${this.name}, message: ${this.message}`\n    }\n  }\n  const mad = new Mad('mad', 'hello world')\n  console.log(mad.greeting)\n  mad.setName = 'integral'\n  mad.setMessage = 'welcome to the jungle'\n  console.log(mad.greeting)\n  console.clear()\n}"],
  "mappings": "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",
  "names": []
}
