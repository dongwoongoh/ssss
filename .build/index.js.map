{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["class Node {\n  data: number;\n  next: Node | null;\n\n  constructor(data: number) {\n    this.data = data;\n    this.next = null;\n  }\n}\n\nclass LinkedList {\n  head: Node | null;\n  size: number;\n\n  constructor() {\n    this.head = null;\n    this.size = 0;\n  }\n\n  add(data: number): void {\n    const newNode = new Node(data);\n\n    if (!this.head) {\n      this.head = newNode;\n    } else {\n      let current = this.head;\n      while (current.next) {\n        current = current.next;\n      }\n      current.next = newNode;\n    }\n    this.size++;\n  }\n\n  insertAt(data: number, index: number): void {\n    if (index < 0 || index > this.size) {\n      return console.log(\"Please enter a valid index.\");\n    } else {\n      const newNode = new Node(data);\n      let curr: Node | null;\n      let prev: Node | null;\n\n      curr = this.head;\n\n      if (index === 0) {\n        newNode.next = this.head;\n        this.head = newNode;\n      } else {\n        curr = this.head;\n        let it = 0;\n\n        while (it < index) {\n          it++;\n          prev = curr;\n          curr = curr!.next;\n        }\n\n        newNode.next = curr;\n        prev!.next = newNode;\n      }\n      this.size++;\n    }\n  }\n\n  removeFrom(index: number): number | void {\n    if (index < 0 || index >= this.size) {\n      return console.log(\"Please enter a valid index.\");\n    } else {\n      let curr: Node | null;\n      let prev: Node | null;\n      let it = 0;\n      curr = this.head;\n      prev = curr;\n\n      if (index === 0) {\n        this.head = curr!.next;\n      } else {\n        while (it < index) {\n          it++;\n          prev = curr;\n          curr = curr!.next;\n        }\n        prev!.next = curr!.next;\n      }\n      this.size--;\n\n      return curr!.data;\n    }\n  }\n\n  printList(): void {\n    let curr = this.head;\n    let str = \"\";\n    while (curr) {\n      str += curr.data + \" \";\n      curr = curr.next;\n    }\n    console.log(str);\n  }\n}\n\nconst linkedList = new LinkedList();\nlinkedList.add(1);\nlinkedList.add(2);\nlinkedList.add(3);\nlinkedList.insertAt(0, 0);\nlinkedList.printList();\nlinkedList.removeFrom(1);\nlinkedList.printList();\n"],
  "mappings": "AAAA,WAAW;AAAA,EACT;AAAA,EACA;AAAA,EAEA,YAAY,MAAc;AACxB,SAAK,OAAO;AACZ,SAAK,OAAO;AAAA;AAAA;AAIhB,iBAAiB;AAAA,EACf;AAAA,EACA;AAAA,EAEA,cAAc;AACZ,SAAK,OAAO;AACZ,SAAK,OAAO;AAAA;AAAA,EAGd,IAAI,MAAoB;AACtB,UAAM,UAAU,IAAI,KAAK;AAEzB,QAAI,CAAC,KAAK,MAAM;AACd,WAAK,OAAO;AAAA,WACP;AACL,UAAI,UAAU,KAAK;AACnB,aAAO,QAAQ,MAAM;AACnB,kBAAU,QAAQ;AAAA;AAEpB,cAAQ,OAAO;AAAA;AAEjB,SAAK;AAAA;AAAA,EAGP,SAAS,MAAc,OAAqB;AAC1C,QAAI,QAAQ,KAAK,QAAQ,KAAK,MAAM;AAClC,aAAO,QAAQ,IAAI;AAAA,WACd;AACL,YAAM,UAAU,IAAI,KAAK;AACzB,UAAI;AACJ,UAAI;AAEJ,aAAO,KAAK;AAEZ,UAAI,UAAU,GAAG;AACf,gBAAQ,OAAO,KAAK;AACpB,aAAK,OAAO;AAAA,aACP;AACL,eAAO,KAAK;AACZ,YAAI,KAAK;AAET,eAAO,KAAK,OAAO;AACjB;AACA,iBAAO;AACP,iBAAO,KAAM;AAAA;AAGf,gBAAQ,OAAO;AACf,aAAM,OAAO;AAAA;AAEf,WAAK;AAAA;AAAA;AAAA,EAIT,WAAW,OAA8B;AACvC,QAAI,QAAQ,KAAK,SAAS,KAAK,MAAM;AACnC,aAAO,QAAQ,IAAI;AAAA,WACd;AACL,UAAI;AACJ,UAAI;AACJ,UAAI,KAAK;AACT,aAAO,KAAK;AACZ,aAAO;AAEP,UAAI,UAAU,GAAG;AACf,aAAK,OAAO,KAAM;AAAA,aACb;AACL,eAAO,KAAK,OAAO;AACjB;AACA,iBAAO;AACP,iBAAO,KAAM;AAAA;AAEf,aAAM,OAAO,KAAM;AAAA;AAErB,WAAK;AAEL,aAAO,KAAM;AAAA;AAAA;AAAA,EAIjB,YAAkB;AAChB,QAAI,OAAO,KAAK;AAChB,QAAI,MAAM;AACV,WAAO,MAAM;AACX,aAAO,KAAK,OAAO;AACnB,aAAO,KAAK;AAAA;AAEd,YAAQ,IAAI;AAAA;AAAA;AAIhB,MAAM,aAAa,IAAI;AACvB,WAAW,IAAI;AACf,WAAW,IAAI;AACf,WAAW,IAAI;AACf,WAAW,SAAS,GAAG;AACvB,WAAW;AACX,WAAW,WAAW;AACtB,WAAW;",
  "names": []
}
